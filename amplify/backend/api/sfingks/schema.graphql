type Quest @model
@key(fields: ["questId"])
@key(name: "byCategoryByDate", fields: ["category", "createdAt"], queryField: "questsByCategory")
@versioned
@auth(rules: [{ allow: public, provider: apiKey }]) {
  questId: ID!
  title: String!
  totalPoints: Int
  endDate: String!
  imageUrl: String
  slotsRemaining: Int
  description: String
  category: QuestCategory!
  creatorId: ID!
  createdAt: AWSDateTime!
  tasks: [Task] @connection(keyName: "byQuestId", fields: ["questId"])
}
type Task @model
@key(fields: ["taskId"])
@key(name: "byQuestId",fields: ["questId"])
@versioned
@auth(rules: [{ allow: public, provider: apiKey }]) {
  taskId: ID!
  questId: ID!
  quest: Quest! @connection(fields: ["questId"])
  description: String
  position: Int
  module: Module
  submodule: Submodule
  points: Int
  remaining: Int
  moduleSpecificMetadata: ModuleSpecificMetadata
  completed: Boolean
}
type RewardItem @model
@key(fields: ["itemId"])
@key(name: "byCategoryByDate", fields: ["category", "createdAt"], queryField: "rewardItemsByCategory")
@versioned
@auth(rules: [{ allow: public, provider: apiKey }]) {
  itemId: ID!
  title: String!
  createdAt: AWSDateTime!
  cost: Int
  images: [String]!
  inventoryRemaining: Int
  description: String
  tags: [String]
  category: RewardItemCategory!
  availableAt: String
}

type ModuleSpecificMetadata {
  username: String
  name: String
  completed: Boolean
  url: String
  iosUrl: String
  androidUrl: String
}

type WalletBalance @model
@versioned
@auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID!
  balance: Int
}

type Transaction @model
@auth(rules: [{ allow: public, provider: apiKey }]) {
  transactionId: ID!
  userId: ID!
  transactionAmount: Int
  rewardItemId: ID
  taskId: ID
}

enum Module {
  TWITTER
  INSTAGRAM
  WEBPAGE
  FACEBOOK
  APP_STORE
}

enum Submodule {
  FOLLOW
  RETWEET
  LIKE
  VIEW
  DOWNLOAD
}

enum QuestCategory {
  FEATURED
  NEW
  HOT
  RECOMMENDED
}

enum RewardItemCategory {
  UPCOMING,
  FEATURED,
  NEW
}
